//
//  RepositoriesViewController.swift
//  Github
//
//  Created by Axel Zuziak on 02.10.2016.
//  Copyright (c) 2016 SwiftyDev Axel Zuziak. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol RepositoriesViewControllerInput {
    func display(emptyState: RepositoriesViewModel.EmptyState)
    func display(error: RepositoriesViewModel.Error)
    func display(data: RepositoriesViewModel.Data)
    func display(loadingState: RepositoriesViewModel.LoadingState)
}

protocol RepositoriesViewControllerOutput {
    func didSearch(query: String)
    func didClearInput()
    func didLoad()
    var repositories: [Repository] { get }
}

class RepositoriesViewController: UIViewController {
    var output: RepositoriesViewControllerOutput!
    var router: RepositoriesRouter!

    var repositories: [RepositoriesViewModel.Data.RepositoryViewModel] = []
    
    @IBOutlet weak var searchBar: UISearchBar!
    @IBOutlet weak var emptyStateLabel: UILabel!
    @IBOutlet weak var tableView: UITableView!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    
    @IBOutlet weak var navigationBarBackground: UIView!
    
    let navigationBarGradientLayer = AppearanceController.CommonLayers.gradientLayer()
    
    override func awakeFromNib() {
        super.awakeFromNib()
        RepositoriesConfigurator.sharedInstance.configure(viewController: self)
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        output.didLoad()
        configure()
        setupNavigationBar()
    }
    
    override func viewDidLayoutSubviews() {
        navigationBarGradientLayer.frame = navigationBarBackground.bounds
    }

    private func setupNavigationBar() {
        if let navigationController = navigationController {
            navigationController.navigationBar.setBackgroundImage(UIImage(), for: UIBarMetrics.default)
            navigationController.navigationBar.shadowImage = UIImage()
            navigationController.navigationBar.isTranslucent = true
            navigationController.view.backgroundColor = UIColor.clear
        }
        navigationBarBackground.layer.insertSublayer(navigationBarGradientLayer, at: 0)
        searchBar.backgroundImage = UIImage()
        searchBar.isTranslucent = true
        searchBar.backgroundColor = UIColor.clear
    }
    
    private func configure() {
        title = "Search"
        searchBar.layer.borderWidth = 0.0
        searchBar.delegate = self
        tableView.delegate = self
        tableView.dataSource = self
        tableView.rowHeight = 95.0
        tableView.contentInset = UIEdgeInsets(top: 8.0, left: 0.0, bottom: 8.0, right: 0.0)
        if UIApplication.shared.keyWindow?.traitCollection.forceTouchCapability == UIForceTouchCapability.available {
            registerForPreviewing(with: self, sourceView: tableView)
        }
    }
}

extension RepositoriesViewController: RepositoriesViewControllerInput {
    
    func display(emptyState: RepositoriesViewModel.EmptyState) {
        emptyStateLabel.text = emptyState.description
        makeEmptyState(visible: true)
        makeLoader(visible: false)
        reloadTableView(withRepositories: [])
    }
    
    func display(error: RepositoriesViewModel.Error) {
        emptyStateLabel.text = error.description
        makeEmptyState(visible: true)
        makeLoader(visible: false)
        reloadTableView(withRepositories: [])
    }
    
    func display(data: RepositoriesViewModel.Data) {
        reloadTableView(withRepositories: data.repositories)
        makeLoader(visible: false)
        makeEmptyState(visible: false)
    }
    
    func display(loadingState: RepositoriesViewModel.LoadingState) {
        emptyStateLabel.text = loadingState.description
        makeLoader(visible: true)
        makeEmptyState(visible: true)
        reloadTableView(withRepositories: [])
    }
    
    func makeLoader(visible: Bool) {
        activityIndicator.isHidden = !visible
        activityIndicator.startAnimating()
    }
    
    func makeEmptyState(visible: Bool) {
        emptyStateLabel.isHidden = !visible
        tableView.isHidden = visible
    }
    
    func reloadTableView(withRepositories repositories: [RepositoriesViewModel.Data.RepositoryViewModel]) {
        self.repositories = repositories
        tableView.reloadData()
    }
}

extension RepositoriesViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return repositories.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "RepositoryTableViewCell", for: indexPath) as! RepositoryTableViewCell
        cell.configure(withViewModel: repositories[indexPath.row])
        return cell
    }
}

extension RepositoriesViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router.navigateToDetail(repository: output.repositories[indexPath.row])
        searchBar.resignFirstResponder()
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        searchBar.resignFirstResponder()
    }
}

extension RepositoriesViewController: UISearchBarDelegate {
    
    func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String) {
        if searchText.characters.isEmpty { output.didClearInput() }
        else { output.didSearch(query: searchText) }
    }
    
    func searchBarSearchButtonClicked(_ searchBar: UISearchBar) {
        searchBar.resignFirstResponder()
    }
}

extension RepositoriesViewController: UIViewControllerPreviewingDelegate {
    func previewingContext(_ previewingContext: UIViewControllerPreviewing, viewControllerForLocation location: CGPoint) -> UIViewController? {
        
        if let indexPath = tableView.indexPathForRow(at: location), let cell = tableView.cellForRow(at: indexPath) {
            previewingContext.sourceRect = cell.frame
            return router.viewController(forRepository: output.repositories[indexPath.row])
        }
        return nil
    }
    
    func previewingContext(_ previewingContext: UIViewControllerPreviewing, commit viewControllerToCommit: UIViewController) {
        router.navigate(toViewController: viewControllerToCommit)
    }
}
