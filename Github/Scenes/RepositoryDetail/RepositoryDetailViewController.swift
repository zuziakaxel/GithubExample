//
//  RepositoryDetailViewController.swift
//  Github
//
//  Created by Axel Zuziak on 04.10.2016.
//  Copyright (c) 2016 SwiftyDev Axel Zuziak. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol RepositoryDetailViewControllerInput {
    func display(viewModel: RepositoryDetailViewModel)
    func display(readme: String)
    func display(emptyState: ReadmeState.Empty)
    func display(loadingState: ReadmeState.Loading)
}

protocol RepositoryDetailViewControllerOutput {
    func loadData()
    var repository: Repository! { get set }
}

class RepositoryDetailViewController: UIViewController, RepositoryDetailViewControllerInput {
    var output: RepositoryDetailViewControllerOutput!
    var router: RepositoryDetailRouter!

    @IBOutlet weak var markdownWebView: UIWebView!
    @IBOutlet weak var emptyStateLabel: UILabel!
    @IBOutlet weak var activityIndicator: UIActivityIndicatorView!
    @IBOutlet weak var avatarImageView: UIImageView!
    @IBOutlet weak var titleLabel: UILabel!
    @IBOutlet weak var descriptionLabel: UILabel!
    @IBOutlet weak var detailView: UIView!
    @IBOutlet weak var starsCountLabel: UILabel!
    @IBOutlet weak var forksCountLabel: UILabel!
    @IBOutlet weak var issuesCountLabel: UILabel!
    
    let gradientLayer = AppearanceController.CommonLayers.gradientLayer()

    override func awakeFromNib() {
        super.awakeFromNib()
        RepositoryDetailConfigurator.sharedInstance.configure(viewController: self)
    }

    override func viewDidLoad() {
        super.viewDidLoad()
        output.loadData()
        configure()
    }

    override func viewDidLayoutSubviews() {
        gradientLayer.frame = self.detailView.bounds
    }
    
    func configure() {
        self.detailView.layer.insertSublayer(gradientLayer, at: 0)
        avatarImageView.layer.cornerRadius = 50.0
        avatarImageView.layer.masksToBounds = true
    }
    
    func display(viewModel: RepositoryDetailViewModel) {
        avatarImageView.set(imageType: viewModel.image)
        title = viewModel.title
        titleLabel.text = viewModel.subtitle + "/" + viewModel.title
        descriptionLabel.text = viewModel.description
        starsCountLabel.text = viewModel.starsCount
        forksCountLabel.text = viewModel.forksCount
        issuesCountLabel.text = viewModel.issuesCount
    }
    
    func display(readme: String) {
        makeLoader(visible: false)
        makeEmptyState(visible: false)
        markdownWebView.loadHTMLString(readme, baseURL: nil)
    }
    
    func display(loadingState: ReadmeState.Loading) {
        emptyStateLabel.text = loadingState.description
        makeLoader(visible: true)
        makeEmptyState(visible: true)
    }
    
    func display(emptyState: ReadmeState.Empty) {
        emptyStateLabel.text = emptyState.description
        makeLoader(visible: false)
        makeEmptyState(visible: true)
    }
    
    func makeLoader(visible: Bool) {
        activityIndicator.isHidden = !visible
        activityIndicator.startAnimating()
    }
    
    func makeEmptyState(visible: Bool) {
        emptyStateLabel.isHidden = !visible
        markdownWebView.isHidden = visible
    }
}
